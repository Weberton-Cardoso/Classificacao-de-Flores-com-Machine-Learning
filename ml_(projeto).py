# -*- coding: utf-8 -*-
"""ML (Projeto)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17XyUwhPwdcd4Wif5SN7UoQcKxAshqTSK
"""

# Carregar e Explorar os dados

import pandas as pd

# URL da base de dados Iris
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

# Carregar os dados
column_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']
iris_data = pd.read_csv(url, header=None, names=column_names)

# Exibir as primeiras linhas dos dados
print(iris_data.head())

# Preparar os dados

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Separar as features e o target
X = iris_data.drop('class', axis=1)
y = iris_data['class']

# Dividir os dados em conjuntos de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalizar as features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Criar a pipeline de Treinamento e avaliação do modelo

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Treinar o modelo
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Avaliar o modelo
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Acurácia: {accuracy:.2f}')

# Desenvolver a API

from flask import Flask, request, jsonify
import numpy as np

app = Flask(__name__)

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json(force=True)

    # Extrair os parâmetros
    sepal_length = data['sepal_length']
    sepal_width = data['sepal_width']
    petal_length = data['petal_length']
    petal_width = data['petal_width']

    # Criar o array de input para o modelo
    input_features = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
    input_features = scaler.transform(input_features)

    # Realizar a predição
    prediction = model.predict(input_features)

    # Retornar a predição como resposta JSON
    return jsonify({'prediction': prediction[0]})

if __name__ == '__main__':
    app.run(debug=True)

